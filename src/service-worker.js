/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */
// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

const portTimeoutDuration = 5000;
let cancellable = false;

const listener = (event) => {
  const { url } = event.request;
  if (!url.includes(self.registration.scope + 'webtorrent/')) return null;
  if (url.includes(self.registration.scope + 'webtorrent/keepalive/')) return new Response();
  if (url.includes(self.registration.scope + 'webtorrent/cancel/')) {
    return new Response(
      new ReadableStream({
        cancel() {
          cancellable = true;
        },
      })
    );
  }
  return serve(event);
};

async function serve({ request }) {
  const { url, method, headers, destination } = request;
  const clientlist = await clients.matchAll({ type: 'window', includeUncontrolled: true });

  const [data, port] = await new Promise((resolve) => {
    // Use race condition for whoever controls the response stream
    for (const client of clientlist) {
      const messageChannel = new MessageChannel();
      const { port1, port2 } = messageChannel;
      port1.onmessage = ({ data }) => {
        resolve([data, port1]);
      };
      client.postMessage(
        {
          url,
          method,
          headers: Object.fromEntries(headers.entries()),
          scope: self.registration.scope,
          destination,
          type: 'webtorrent',
        },
        [port2]
      );
    }
  });

  let timeOut = null;
  const cleanup = () => {
    port.postMessage(false); // send a cancel request
    clearTimeout(timeOut);
    port.onmessage = null;
  };

  if (data.body !== 'STREAM') {
    cleanup();
    return new Response(data.body, data);
  }

  return new Response(
    new ReadableStream({
      pull(controller) {
        return new Promise((resolve) => {
          port.onmessage = ({ data }) => {
            if (data) {
              controller.enqueue(data); // data is Uint8Array
            } else {
              cleanup();
              controller.close(); // data is null, means the stream ended
            }
            resolve();
          };
          if (!cancellable) {
            // firefox doesn't support cancelling of Readable Streams in service workers,
            // so we just empty it after 5s of inactivity, the browser will request another port anyways
            clearTimeout(timeOut);
            if (destination !== 'document') {
              timeOut = setTimeout(() => {
                cleanup();
                resolve();
              }, portTimeoutDuration);
            }
          }
          port.postMessage(true); // send a pull request
        });
      },
      cancel() {
        cleanup();
      },
    }),
    data
  );
}

self.addEventListener('install', () => {
  self.skipWaiting();
});

self.addEventListener('fetch', (event) => {
  const res = listener(event);
  if (res) event.respondWith(res);
});

self.addEventListener('activate', () => {
  self.clients.claim();
});
